---
import BaseLayout from "../layouts/baseLayout.astro";
import CheckboxInput from "../components/forms/checkboxInput.astro";
import RadioButtonInput from "../components/forms/radioButtonInput.astro";
import UsernameInput from "../components/forms/usernameInput.astro";
import TextInput from "../components/forms/textInput.astro";
import Toast from "../components/toast/toast.astro";
import "../styles/main.css";
import categories from "../data/profileCategories.json";

interface Category {
  key: string;
  text: string;
}

let categoriesList: Category[] = [];
for (const key in categories) {
  categoriesList.push({ key: key, text: categories[key].text });
}
---

<BaseLayout
  title="Publicar Nuevo Empleo | CuCoders"
  description="Atrae al mejor talento de la tecnología con nuestras ofertas de empleo en CuCoders. Publica una nueva oferta y encuentra al candidato perfecto para tu empresa. ¡Descubre cómo puedes conectarte con la comunidad de programadores de Cuba y atraer al mejor talento hoy mismo en CuCoders!"
>
  <div class="lg:max-w-[58rem] mx-auto w-full md:mt-12">
    <div
      id="newJobsAlert"
      class="flex p-4 hidden mt-5 md:mt-0 text-sm mb-6 text-blue-800 border border-blue-300 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-800"
      role="alert"
    >
      <svg
        aria-hidden="true"
        class="flex-shrink-0 inline w-5 h-5 mr-3"
        fill="currentColor"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
        ><path
          fill-rule="evenodd"
          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
          clip-rule="evenodd"></path></svg
      >
      <span class="sr-only">Info</span>
      <div>
        <span class="font-medium">Antes de publicar su anuncio, asegúrese de respetar las siguientes normas.</span>
        <ul class="mt-1.5 ml-4 list-disc list-inside">
          <li>Solo publicar ofertas de trabajo.</li>
          <li>No publicar candidaturas (Que estas buscando trabajo).</li>
          <li>No promocionar Servicios.</li>
          <li>No repetir el mismo anuncio en el plazo de un mes.</li>
          <li>No publicar ofertas de trabajos engañosas o inmorales.</li>
        </ul>
      </div>
      <!-- <button
      type="button"
      class="ml-auto -mx-1.5 -my-1.5 bg-blue-50 text-blue-500 rounded-lg focus:ring-2 focus:ring-blue-400 p-1.5 hover:bg-blue-200 inline-flex h-8 w-8 dark:bg-gray-800 dark:text-blue-300 dark:hover:bg-gray-700"
      data-dismiss-target="#newJobsAlert"
      aria-label="Close"
      id="closeNewJobsAlert"
    >
      <span class="sr-only">Close</span>
      <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"
        ><path
          fill-rule="evenodd"
          d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
          clip-rule="evenodd"></path></svg
      >
    </button> -->
    </div>
  </div>

  <form
    id="job-form"
    class="bg-white border md:mx-auto mb-5 p-8 lg:max-w-[58rem] border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700 w-full"
  >
    <div class="flex justify-between">
      <h1 class="text-xl font-bold dark:text-gray-100">Nuevo Empleo</h1>
    </div>

    <hr class="my-4" />

    <div>
      <div class="mb-6">
        <TextInput id="title" label="Título *" maxlength="100" required={true} />
      </div>

      <div class="mb-6">
        <TextInput id="salary" label="Salario" maxlength="60" />
      </div>

      <div class="mb-6">
        <label for="description" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Descripción *</label>
        <textarea
          id="description"
          required={true}
          rows="6"
          class="block p-2.5 w-full text-sm bg-gray-50 text-gray-900 rounded-lg border border-gray-300 focus:ring-gray-500 focus:border-gray-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500"
        ></textarea>
      </div>

      <div class="mb-6">
        <label for="message" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Categorías *</label>
        <!-- styles for this element are defined in styles/main.css-->
        <select id="categories" name="state[]" multiple autocomplete="off">
          <option value="">Select a state...</option>
          {categoriesList.map((category) => <option value={category.key}>{category.text}</option>)}
        </select>
      </div>

      <div class="grid gap-6 mb-6 md:grid-cols-3">
        <CheckboxInput id="fulltime" label="Tiempo Competo" />
        <CheckboxInput id="parttime" label="Tiempo Parcial" />
        <CheckboxInput id="freelance" label="Freelance" />
      </div>
      <div class="grid gap-6 mb-6 md:grid-cols-3">
        <CheckboxInput id="remote" label="Remoto" />
        <CheckboxInput id="presential" label="Presencial" />
        <CheckboxInput id="relocate" label="Reubicación" />
      </div>

      <div class="grid gap-6 mb-6 md:grid-cols-1">
        <TextInput id="location" label="Ubicación" maxlength="250" />
      </div>
      <div class="grid gap-6 mb-6 md:grid-cols-2">
        <TextInput id="organization" label="Empresa" maxlength="250" type="text" />
        <TextInput id="organizationWebsite" label="Sitio web de la empresa" maxlength="300" type="url" />
      </div>

      <div class="flex justify-between">
        <h1 class="text-xl font-bold dark:text-gray-100">Datos de Contacto</h1>
      </div>
      <hr class="my-4" />
      <div class="grid gap-6 mb-6 md:grid-cols-2">
        <TextInput id="applyEmail" label="Correo Electronico" maxlength="250" type="email" />
        <TextInput id="applyUrl" label="URL para aplicar" maxlength="250" type="url" />
        <UsernameInput id="applyTelegramUser" label="Usuario de Telegram" maxlength="250" />
        <TextInput id="applyPhone" label="Número Telefónico" maxlength="250" type="tel" />
      </div>
    </div>

    <div class="flex justify-center">
      <button
        id="addJobBtn"
        class="text-white mt-4 mx-2 bg-gray-800 hover:bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
        >Publicar Empleo</button
      >
    </div>
  </form>

  <Toast />
</BaseLayout>

<link href="https://cdn.jsdelivr.net/npm/tom-select/dist/css/tom-select.css" rel="stylesheet" />
<script is:inline src="https://cdn.jsdelivr.net/npm/tom-select/dist/js/tom-select.complete.min.js"></script>

<script is:inline>
  var control = new TomSelect("#categories", { maxItems: 5 });
</script>

<script is:inline>
  if (localStorage.getItem("hideNewJobAlert") === null) {
    document.getElementById("newJobsAlert").classList.remove("hidden");
  }

  document.getElementById("closeNewJobsAlert").addEventListener("click", () => {
    localStorage.hideNewJobAlert = true;
  });
</script>

<script>
  import { backend_url } from "../data/conf.json";
  import dayjs from "dayjs";
  import { showToast } from "../components/toast/toast";

  const blacklist = ["karmal1711pro@gmail.com", "karma"];

  const jobForm = document.getElementById("job-form");
  const addJobBtn = document.getElementById("addJobBtn") as HTMLButtonElement;

  if (jobForm) {
    jobForm.addEventListener("submit", addJob, true);
  }

  async function addJob(e: Event) {
    e.preventDefault();
    const data = createJobData();

    if (isBlacklisted(data)) {
      showToast(
        "Su contacto está en la lista negra por haber incumplido anteriormente las normas para publicar un anuncio. Si cree que esto es un error, por favor contáctenos.",
        true
      );
      return;
    }

    disableBtn();
    try {
      const response = await fetch(backend_url + "api/jobs/new-job", { method: "POST", body: JSON.stringify(data) });
      const responseData = await response.json();
      window.open(`${window.location.origin}/empleo-publicado`, "_self");
    } catch (e) {
      enableBtn();
      showToast("Algo salio mal. Por favor vuelva a intentarlo más tarde.", true);
    }
  }

  function isBlacklisted(data: any) {
    const contactFields = [
      data.applyEmail.toLowerCase(),
      data.applyTelegramUser.toLowerCase(),
      data.applyPhone.toLowerCase(),
    ];

    for (const field of contactFields) {
      if (field && blacklist.includes(field.toLowerCase())) {
        return true;
      }
    }
    return false;
  }

  function getElem(id: string): HTMLInputElement {
    return document.getElementById(id) as HTMLInputElement;
  }

  function createJobData() {
    let data: {
      title: string;
      salary: string;
      description: string;
      categories: string[];
      freelance: boolean;
      fulltime: boolean;
      parttime: boolean;
      remote: boolean;
      presential: boolean;
      relocate: boolean;
      location: string;
      pubDate: string;
      applyEmail: string;
      applyUrl: string;
      applyTelegramUser: string;
      applyPhone: string;
      organization: string;
      organizationWebsite: string;
      slug: string;
    } = {
      title: getElem("title").value,
      salary: getElem("salary").value,
      description: getElem("description").value,
      categories: [],
      freelance: getElem("freelance").checked,
      fulltime: getElem("fulltime").checked,
      parttime: getElem("parttime").checked,
      remote: getElem("remote").checked,
      presential: getElem("presential").checked,
      relocate: getElem("relocate").checked,
      location: getElem("location").value,
      pubDate: dayjs().format("MM/DD/YYYY"),
      applyEmail: getElem("applyEmail").value,
      applyUrl: getElem("applyUrl").value,
      applyTelegramUser: getElem("applyTelegramUser").value,
      applyPhone: getElem("applyPhone").value,
      organization: getElem("organization").value,
      organizationWebsite: getElem("organizationWebsite").value,
      slug: getElem("title").value.replace(/[^a-zA-Z0-9]+/g, "-"),
    };

    const categoriesSelect = document.getElementById("categories") as HTMLSelectElement;
    if (categoriesSelect) {
      for (let option of categoriesSelect.options) {
        if (option.selected) {
          data.categories.push(option.value);
        }
      }
    }
    return data;
  }

  function disableBtn() {
    if (addJobBtn) {
      addJobBtn.disabled = true;
      addJobBtn.textContent = "Publicando...";
    }
  }

  function enableBtn() {
    if (addJobBtn) {
      addJobBtn.disabled = false;
      addJobBtn.textContent = "Publicar Empleo";
    }
  }
</script>
