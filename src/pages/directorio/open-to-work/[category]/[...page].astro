---
import DirectoryLayout from "../../../../layouts/directoryLayout.astro";
import categories from "../../../../data/profileCategories.json";
import ProfileCard from "../../../../components/profile/profileCard.astro";
import Pagination from "../../../../components/pagination.astro";
import BreadcrumbContainer from "../../../../components/ui/breadcrumbContainer.astro";
import { members_api_url } from "../../../../data/conf.json";

export async function getStaticPaths({ paginate }) {
  let allCategories = [];
  allCategories.push({ key: "todos", slug: "todos" });
  for (const key in categories) {
    allCategories.push({ key: key, slug: categories[key].slug });
  }

  const response = await fetch(members_api_url + "members-data");
  const members_data = await response.json();
  const members_array = Object.values(members_data);

  return allCategories.flatMap((categoryObj) => {
    let filteredMembers =
      categoryObj.key == "todos"
        ? members_array.filter((member) => member["hireable"])
        : members_array.filter((member) => member["hireable"] && member["categories"].includes(categoryObj.key));
    const category = categoryObj.slug;
    return paginate(filteredMembers, {
      params: { category },
      pageSize: 21,
    });
  });
}
const { page } = Astro.props;
const params = Astro.params;

let category = {};

for (const [key, value] of Object.entries(categories)) {
  if (value.slug == params.category) {
    category = value;
    break;
  }
}

let title = `Directorio de Desarrolladores Cubanos Disponibles para Trabajar`;
if (category.text) title += ` | ${category.text}`;
if (page.currentPage != 1) title += ` | Página ${page.currentPage}`;
title += " | CuCoders";
---

<DirectoryLayout
  title={title}
  openToWork={true}
>
  {
    category.text ? (
      <BreadcrumbContainer
        breadcrumbItems={[
          { label: "Directorio", url: "/directorio", home: true },
          { label: "Open To Work", url: "/directorio/open-to-work/todos" },
          { label: category.text },
        ]}
        btnLabel="Regístrate"
        btnUrl="/registro"
        btnIcon="/assets/img/icons/profile.svg"
      />
    ) : (
      <BreadcrumbContainer
        breadcrumbItems={[
          { label: "Directorio", url: "/directorio", home: true },
          { label: "Open To Work", url: "/directorio/open-to-work/todos" },
          { label: "Todos" },
        ]}
        btnLabel="Regístrate"
        btnUrl="/registro"
        btnIcon="/assets/img/icons/profile.svg"
      />
    )
  }

  {page.data.length == 0 && <img src="/assets/img/emptyList.webp" class="md:w-2/3 w-full mx-auto my-4 dark:opacity-50" />}
  <div class="grid gap-6 w-full grid-cols-1 md:grid-cols-2 lg:grid-cols-3 mb-7">
    {page.data.map((profile) => <ProfileCard profile={profile} />)}
  </div>
  <Pagination prev={page.url.prev} next={page.url.next} />
</DirectoryLayout>
