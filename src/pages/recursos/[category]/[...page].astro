---
import ResourcesLayout from "../../../layouts/resourcesLayout.astro";
import categories from "../../../data/resourcesCategories.json";
import Pagination from "../../../components/pagination.astro";
import ResourceCard from "../../../components/resourceCard.astro";
import BreadcrumbContainer from "../../../components/ui/breadcrumbContainer.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths({ paginate }) {
  let allCategories = [];
  for (const key in categories) {
    if (categories[key].isParent) {
      for (const item in categories[key].items) {
        allCategories.push({ key: categories[key].items[item].id, slug: categories[key].items[item].slug });
      }
    } else {
      allCategories.push({ key: categories[key].id, slug: categories[key].slug });
    }
  }

  const allResources = await getCollection("resources");
  return allCategories.flatMap((categoryObj) => {
    let filteredResources = allResources.filter((resource) => resource.data.category == categoryObj.key);
    const category = categoryObj.slug;
    return paginate(filteredResources, {
      params: { category },
      pageSize: 20,
    });
  });
}
const { page } = Astro.props;
const params = Astro.params;
const category = getSelectedCategoryBySlug(params.category);

function getSelectedCategoryBySlug(slug) {
  for (const category of categories) {
    for (const item of category.items) {
      if (item.slug == slug) {
        return item;
      }
    }
    if (category.slug == slug) {
      return category;
    }
  }
  return null;
}

let title = `Directorio de Recursos para Programadores`;
if (category) title += ` | ${category.text}`;
if (page.currentPage != 1) title += ` | PÃ¡gina ${page.currentPage}`;
title += " | CuCoders";
---

<ResourcesLayout title={title} openCategory={category.parentId}>
  <BreadcrumbContainer
    breadcrumbItems={[{ label: "Recursos", home: true, url: "/recursos" }, { label: category.text }]}
    btnLabel=" Adicionar Recurso"
    btnUrl="/nuevo-recurso"
    btnIcon="/assets/img/icons/add.svg"
  />

  {page.data.length == 0 && <img src="/assets/img/emptyList.webp" class="md:w-2/3 w-full mx-auto my-4 dark:opacity-50" />}

  <div class="grid mb-6 w-full gap-3 md:grid-cols-1 mx-auto px-1 sm:px-0">
    {
      page.data.map((resource) => (
        <ResourceCard name={resource.data.name} url={resource.data.url} description={resource.data.description} />
      ))
    }
  </div>

  <Pagination prev={page.url.prev} next={page.url.next} />
</ResourcesLayout>
